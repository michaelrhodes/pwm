#!/usr/bin/env node

var program = require('commander')
program.option('--save', 'Add module to module.json file')
program.parse(process.argv)

require('colors')
var fs = require('fs')
var join = require('path').join
var request = require('hyperdirect').request
var unzip = require('decompress').extract
var glob = require('glob')
var semver = require('semver')
var split = require('split')
var rm = require('rimraf').sync

var database = require('../lib/database')
var findModuleVersion = require('../lib/find-module-version')
var toSemver = require('../lib/version-to-semver')

// Find things
var root = require('../lib/find-project-root')()
var siteModules = require('../lib/site-modules-or-die')(root)
var json = require('../lib/get-module-json')(root)
var jsonPath = join(root, 'module.json')

// Install an individual module
var install = function(error, module, expectedVersion, strict) {
  var log = function(message, type, status) {
    var type = (type ? type.green : '')
    var status = (status ? status.magenta : '')
    var output = [type, status, message].join(' ')

    console.log('pwm ' +  output)
  }

  var fail = function(type, error) {
    if (exists) {
      rm(hidden)
    }
    console.error('pwm ' + type.red + ' ' + error.message)
  }

  if (error) {
    fail('lookup', error)
    return
  }



  // Determine ./site/modules/{class_name} directory
  var directory = join(siteModules, module.class_name)

  // Blow away existing copies
  var exists = fs.existsSync(directory)
  if (exists) {
    var hidden = join(siteModules, '.old.' + module.class_name)
    if (fs.existsSync(hidden)) {
      rm(hidden)  
    }
    fs.renameSync(directory, hidden)
  }
 
  // Download and unzip
  log(module.download_url, 'http', 'GET')
  request(module.download_url)
    .on('error', fail.bind(fail, 'download'))
    .on('end', log.bind(log, module.download_url, 'http', '200'))
    .pipe(unzip({ ext: '.zip', path: directory }))
    .on('error', fail.bind(fail, 'unzip'))
    .on('close', function() {
      var finish = function(version) {

        if (exists) {
          rm(hidden)
        }

        if (version) {
          module.module_version = version
        }

        // Update/create module.json
        if (program.save) {
          var modules = json.modules || {}
          modules[module.class_name] = '~' + module.module_version
          json.modules = modules
          fs.writeFileSync(jsonPath, JSON.stringify(json, null, 2))
        }

        var announceInstall = function() {
          if (installed.length === toInstall) {
            installed.forEach(function(module) {
              console.log(
                module.class_name + '@' + module.module_version + ' ' +
                module.directory.replace(root, '').replace(/^\//, '')
              )
            })
          }
        }

        // Look at what was installed.
        glob('*', { cwd: directory }, function(error, files) {
          // Check for a wrapper directory. 
          if (files.length === 1) {
            var file = join(directory, files[0])
            return fs.stat(file, function(error, stat) {
              if (error) {
                fail('cleanup', error.message)
                return
              }

              // Replace ./site/module/{class_name} with a
              // renamed version of this wrapper directory.
              if (stat.isDirectory()) {
                var temp = join(
                  siteModules, '.' + module.class_name
                ) 
                fs.renameSync(file, temp)
                rm(directory)
                fs.renameSync(temp, directory)
              }

              module.directory = directory
              installed.push(module)
              announceInstall() 
            })
          }

          module.directory = directory
          installed.push(module)
          announceInstall() 
        }) 
      }

      // Double check that this version can be installed
      glob('*/*.module', { cwd: directory }, function(error, files) {
        var version = null
        if (error || !files.length) {
          return fail('versioncheck', error ? error : new Error(
            'Couldn’t find the .module file'
          ))
        }
        var moduleFile = join(directory, files[0])
        findModuleVersion(moduleFile, function(error, version) {
          version = toSemver(version)
          var valid = false
          if (version) {
            valid = semver.satisfies(version, expectedVersion)
          }
          if (valid) {
            finish()
          }
          else if (!valid && !strict) {
            console.log(
              'pwm ' +
              'version mismatch '.yellow +
              'you should run `pwm update` when you have a second'.grey
            )
            finish(version)
          }
          else {
            if (exists) {
              rm(directory)
              fs.renameSync(hidden, directory)
            }
            version ?
              fail('versioncheck', new Error(
                'Expected version ' + expectedVersion + ' but found ' + version
              )) :
              fail('semvercheck', new Error(
                'Invalid semver in the .module file'
              ))
          }
        })
      })
    })
}

var toInstall = 0 
var toBeInstalled = []
var installed = []

process.stdin
  .on('end', function() {
    // If no modules were requested via pipe…
    if (!toBeInstalled.length) {
      // Install modules passed into program
      if (program.args.length) {
        toBeInstalled = program.args
      }
      // Install modules from the module.json
      else {
        var modules = json.modules
        var names = Object.keys(modules)
        if (names.length) {
          toBeInstalled = names.map(function(name) {
            return name + '@' + modules[name]  
          })
        }
      }
    }

    toBeInstalled.forEach(function(identifier) {
      database.find(identifier, install)
      toInstall++
    })
  })
  .pipe(split())
  .on('data', function(chunk) {
    if (chunk !== null) {
      toBeInstalled.push(chunk)
    }
  })
