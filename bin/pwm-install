#!/usr/bin/env node

require('colors')
var fs = require('fs')
var path = require('path')
var program = require('commander')
var find = require('find-parent-dir')
var request = require('hyperdirect').request
var unzip = require('decompress').extract
var glob = require('glob')
var rm = require('rimraf').sync
var database = require('../database')

program.option('--save', 'Add module to module.json file')
program.parse(process.argv)

var cwd = process.cwd()
var root = cwd
var siteModules = path.join(root, 'site/modules')

if (!fs.existsSync(siteModules)) {
  root = (
    find.sync(cwd, 'module.json') ||
    find.sync(cwd, 'index.php') ||
    find.sync(cwd, '.git') ||
    cwd
  )
}

siteModules = path.join(root, 'site/modules')

if (!fs.existsSync(siteModules)) {
  console.error(
    'Unable to find the '.grey + 'site/modules'.yellow +
    ' directory.\nTry re-running this command from the '.grey +
    'project root.'.grey
  )
  process.exit(1)
}

var moduleJsonPath = path.join(root, 'module.json')
var moduleJson = (fs.existsSync(moduleJsonPath) ?
  require(moduleJsonPath) : {}
)



var log = function(message, type, status) {
  console.log('pwm ' + [type ? type.green : '', status ? status.magenta : '', message].join(' '))
}

var fail = function(error) {
  console.error('pwm ' + error.message.red)
}

// Install an individual module
var install = function(error, module) {
  if (error) {
    fail(error)
    return
  }

  var directory = path.join(siteModules, module.class_name)
  rm(directory)
 
  // Download and unzip
  log(module.download_url, 'http', 'GET')
  request(module.download_url)
    .on('error', fail)
    .on('end', log.bind(log, module.download_url, 'http', '200'))
    .pipe(unzip({ ext: '.zip', path: directory }))
    .on('error', fail) 
    .on('close', function() {
      if (program.save) {
        var modules = moduleJson.modules || {}
        if (module.class_name in modules) {
          // Do something if will overide
        }
        else {
          modules[module.class_name] = '~' + module.module_version
          moduleJson.modules = modules
          fs.writeFileSync(moduleJsonPath, JSON.stringify(moduleJson, null, 2))
        }
      }

      // Remove wrapping folder
      glob('*', { cwd: directory }, function(error, files) {
        if (files.length === 1) {
          var file = path.join(directory, files[0])
          fs.stat(file, function(error, stat) {
            if (error) {
              fail(error.message)
              return
            }
            if (stat.isDirectory()) {
              var temp = path.join(
                siteModules, '.' + module.class_name
              ) 
              fs.renameSync(file, temp)
              rm(directory)
              fs.renameSync(temp, directory)
              console.log(
                module.class_name + '@' + module.module_version + ' ' +
                directory.replace(root, '')
              )
            }
          })
        }
        else {
          console.log(
            module.class_name + '@' + module.module_version + ' ' +
            directory.replace(root, '')
          )
        }
      }) 
    })
}

// Find modules passed into program
if (program.args.length) {
  return program.args.forEach(function(identifier) {
    database.find(identifier, install)
  })
}

// Find modules in json
var names = Object.keys(moduleJson.modules)
if (names.length) {
  names.forEach(function(name) {
    var identifier = [name, moduleJson.modules[name]].join('@')
    database.find(identifier, install)
  })
}
